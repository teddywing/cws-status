#!/usr/bin/env python3

# cws-status
#
# Print the publish status of extensions on the Chrome Web Store.

import argparse
import os
import re
import sys
from urllib import request

import browser_cookie3
from lxml import html


EX_USAGE = 64
EX_NOUSER = 67


# Parse arguments.
argparser = argparse.ArgumentParser(description='Query the publish status of \
    extensions on the Chromw Web Store dashboard.')
argparser.add_argument(
    '--url',
    required=True,
    help='Chrome Web Store dashboard URL'
)
argparser.add_argument(
    '--cookie-path',
    required=True,
    help='path to a Google Chrome cookie file'
)
argparser.add_argument('name_regex', metavar='<name-regex>')

args = argparser.parse_args()


url = args.url
regex = args.name_regex


# Load browser cookies and fetch CWS dashboard.
cookie_jar = browser_cookie3.chrome(
    cookie_file=os.path.expanduser(args.cookie_path),
)

opener = request.build_opener(request.HTTPCookieProcessor(cookie_jar))

page_html = opener.open(url).read()


# Check whether we're authenticated.
not_logged_in_search = b'Sign in to continue to Chrome Web Store'

if not_logged_in_search in page_html:
    print('error: not authenticated', file=sys.stderr)
    sys.exit(EX_NOUSER)


# Get extension names.
tree = html.fromstring(page_html)

item_names = tree.xpath('//table[//th[text()="Item"]]/tbody/tr/td[1]/a/div//text()')
item_names_versions = []

for i in range(0, len(item_names), 2):
    item_names_versions.append(f'{item_names[i]} ({item_names[i + 1]})')


# Get extension publish statuses.
item_statuses = tree.xpath('//table[//th[text()="Item"]]/tbody/tr/td[7]/text()')


# Print the publish status for the queried extensions.
for i, name in enumerate(item_names_versions):
    if re.match(regex, name):
        print(f'{name}\t{item_statuses[i]}')
